// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEWeaponData : IGDEData
    {
        private static string OwendKey = "Owend";
		private bool _Owend;
        public bool Owend
        {
            get { return _Owend; }
            set {
                if (_Owend != value)
                {
                    _Owend = value;
                    GDEDataManager.SetBool(_key+"_"+OwendKey, _Owend);
                }
            }
        }

        private static string EqupedKey = "Equped";
		private bool _Equped;
        public bool Equped
        {
            get { return _Equped; }
            set {
                if (_Equped != value)
                {
                    _Equped = value;
                    GDEDataManager.SetBool(_key+"_"+EqupedKey, _Equped);
                }
            }
        }

        private static string IdKey = "Id";
		private int _Id;
        public int Id
        {
            get { return _Id; }
            set {
                if (_Id != value)
                {
                    _Id = value;
                    GDEDataManager.SetInt(_key+"_"+IdKey, _Id);
                }
            }
        }

        private static string CostKey = "Cost";
		private float _Cost;
        public float Cost
        {
            get { return _Cost; }
            set {
                if (_Cost != value)
                {
                    _Cost = value;
                    GDEDataManager.SetFloat(_key+"_"+CostKey, _Cost);
                }
            }
        }

        private static string NameKey = "Name";
		private string _Name;
        public string Name
        {
            get { return _Name; }
            set {
                if (_Name != value)
                {
                    _Name = value;
                    GDEDataManager.SetString(_key+"_"+NameKey, _Name);
                }
            }
        }

        private static string WeaponComponentsKey = "WeaponComponents";
		public List<GDEWeaponComponentData>      WeaponComponents;
		public void Set_WeaponComponents()
        {
	        GDEDataManager.SetCustomList(_key+"_"+WeaponComponentsKey, WeaponComponents);
		}
		

        public GDEWeaponData()
		{
			_key = string.Empty;
		}

		public GDEWeaponData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(OwendKey, out _Owend);
                dict.TryGetBool(EqupedKey, out _Equped);
                dict.TryGetInt(IdKey, out _Id);
                dict.TryGetFloat(CostKey, out _Cost);
                dict.TryGetString(NameKey, out _Name);

                dict.TryGetCustomList(WeaponComponentsKey, out WeaponComponents);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _Owend = GDEDataManager.GetBool(_key+"_"+OwendKey, _Owend);
            _Equped = GDEDataManager.GetBool(_key+"_"+EqupedKey, _Equped);
            _Id = GDEDataManager.GetInt(_key+"_"+IdKey, _Id);
            _Cost = GDEDataManager.GetFloat(_key+"_"+CostKey, _Cost);
            _Name = GDEDataManager.GetString(_key+"_"+NameKey, _Name);

            WeaponComponents = GDEDataManager.GetCustomList(_key+"_"+WeaponComponentsKey, WeaponComponents);
         }

        public void Reset_Owend()
        {
            GDEDataManager.ResetToDefault(_key, OwendKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(OwendKey, out _Owend);
        }

        public void Reset_Equped()
        {
            GDEDataManager.ResetToDefault(_key, EqupedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(EqupedKey, out _Equped);
        }

        public void Reset_Id()
        {
            GDEDataManager.ResetToDefault(_key, IdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(IdKey, out _Id);
        }

        public void Reset_Cost()
        {
            GDEDataManager.ResetToDefault(_key, CostKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(CostKey, out _Cost);
        }

        public void Reset_Name()
        {
            GDEDataManager.ResetToDefault(_key, NameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(NameKey, out _Name);
        }

        public void Reset_WeaponComponents()
		{
			GDEDataManager.ResetToDefault(_key, WeaponComponentsKey);

			Dictionary<string, object> dict;
			GDEDataManager.Get(_key, out dict);

			dict.TryGetCustomList(WeaponComponentsKey, out WeaponComponents);
			WeaponComponents = GDEDataManager.GetCustomList(_key+"_"+WeaponComponentsKey, WeaponComponents);

			WeaponComponents.ForEach(x => x.ResetAll());
		}

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, IdKey);
            GDEDataManager.ResetToDefault(_key, NameKey);
            GDEDataManager.ResetToDefault(_key, OwendKey);
            GDEDataManager.ResetToDefault(_key, EqupedKey);
            GDEDataManager.ResetToDefault(_key, WeaponComponentsKey);
            GDEDataManager.ResetToDefault(_key, CostKey);

            Reset_WeaponComponents();

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
